{"version":3,"file":"static/js/396.cb6fa73b.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Contacts/Contacts.module.css?5e71","components/Contacts/icons.svg","components/Contacts/Contacts.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","redux/AppRedux/selectors.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"taskBook\":\"ContactForm_taskBook__BWW6C\",\"formTitle\":\"ContactForm_formTitle__N6O4g\",\"formSection\":\"ContactForm_formSection__4wcn3\",\"button\":\"ContactForm_button__eSwX9\",\"buttonArea\":\"ContactForm_buttonArea__IAEoE\",\"formLabel\":\"ContactForm_formLabel__TSwxK\",\"formInput\":\"ContactForm_formInput__GszVU\"};","import { addContact, saveCustomerName } from '../../redux/AppRedux/operations';\nimport { selectContacts,selectCustomerName} from '../../redux/AppRedux/selectors';\nimport css from './ContactForm.module.css';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport Notiflix from 'notiflix';\nimport { useState } from 'react';\nimport Flatpickr from 'react-flatpickr';\nimport 'flatpickr/dist/themes/material_blue.css';\n\nexport const ContactForm = ({ children }) => {\n  const contactNameId = nanoid();\n  const contactNumberId = nanoid();\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const [date, setDate] = useState(new Date());\n  const customerName = useSelector(selectCustomerName);\n\n  const handleButtonPress = evt => {\n    evt.target.style.boxShadow = 'inset 0 0 10px 5px rgba(0, 0, 0, 0.3)';\n    setTimeout(() => {\n      evt.target.style.boxShadow = 'none';\n    }, 1000);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const currentName = event.target[0].value;\n\n    /*const isNameDuplicate = contacts.some(\n      contact =>\n        contact.name.trim().toLowerCase() === currentName.trim().toLowerCase()\n    );\n    if (isNameDuplicate) {\n      Notiflix.Notify.warning('This name already exists');\n      return;\n    }*/\n\n    if (currentName.trim() === \"\") {\n Notiflix.Notify.warning('Empty spaces are not allowed');\n      return;\n    }\n\n    const exactDate = new Date();\n    if (date <= exactDate) {\n      Notiflix.Notify.failure('Invalid date, choose a date or time in the future');\n    }\n\n    else {\n      dispatch(addContact({ name: event.target[0].value, dueDate: date }));\n    }\n    //console.log({ name: event.target[0].value, phone: event.target[1].value });\n     //event.target.reset();\n  };\n\n  const handleChange = (evt) => {\n    const wrd = evt.target.value\n    let hasExceeded = false;\n    let nameRay;\n    if (wrd.length > 30) {\n      nameRay = [...wrd];\n      nameRay.pop()\n      evt.target.value = nameRay.join(\"\");\n      hasExceeded = true;\n    }\n    if ((hasExceeded === true)) {\n      Notiflix.Notify.warning('Maximum Charater limit is 30');\n    }\n    dispatch(saveCustomerName(evt.target.value));\n  }\n\n  return (\n    <div className={css.taskBook}>\n      <h2 className={css.formTitle}>Scheduler</h2>\n      <form onSubmit={handleSubmit} className={css.formSection}>\n        <label className={css.loginLabel}>\n          <span className={css.formLabel}>Customer Name:</span>\n          <input\n            type=\"text\"\n            placeholder=\"Enter Customer Name\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Enter Customer Name\"\n            required\n            autoComplete=\"off\"\n            id={contactNameId}\n            className={css.formInput}\n            onChange={handleChange}\n            value={customerName}\n          />\n        </label>\n        <label>\n          <span className={css.formLabel}>Due date:</span>\n\n          <Flatpickr\n            data-enable-time\n            value={date}\n            onChange={selectedDates => {\n              const nowDate = new Date();\n              if (selectedDates[0] <= nowDate) {\n                Notiflix.Notify.warning('Choose a date in the future');\n              } else {\n                Notiflix.Notify.success('Due Date Selected');\n              }\n              setDate(selectedDates[0]);\n            }}\n            options={{\n              minuteIncrement: 1, // Set minute increments to 1\n            }}\n            render={({ defaultValue, ...props }, ref) => (\n              <input\n                {...props}\n                ref={ref}\n                className={css.formInput}\n                required\n                id={contactNumberId}\n                name=\"myDate\"\n                title=\"Enter Due Date\"\n              />\n            )}\n          />\n        </label>\n        <div className={css.buttonArea}>\n          <button\n            type=\"submit\"\n            name=\"button\"\n            className={css.button}\n            onClick={handleButtonPress}\n          >\n            Add\n          </button>\n        </div>\n      </form>\n      {children}\n    </div>\n  );\n};\n\nContactForm.propTypes = {\n  children: PropTypes.node,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsSection\":\"ContactList_contactsSection__3KZcT\",\"contactsTitle\":\"ContactList_contactsTitle__gHlpa\",\"contactsList\":\"ContactList_contactsList__7leRd\",\"contactsData\":\"ContactList_contactsData__gZODb\",\"contactsPhone\":\"ContactList_contactsPhone__qIcDs\",\"contactsItemWrapper\":\"ContactList_contactsItemWrapper__-AWsL\",\"contactsItem\":\"ContactList_contactsItem__x8C9b\",\"contactsDetails\":\"ContactList_contactsDetails__71j6L\",\"contactsName\":\"ContactList_contactsName__6rTA7\",\"checkbox\":\"ContactList_checkbox__F7osn\",\"contactsButtonArea\":\"ContactList_contactsButtonArea__6jkW1\",\"contactsButton\":\"ContactList_contactsButton__6hBLW\",\"navigationArea\":\"ContactList_navigationArea__nXhaT\",\"navigationButton\":\"ContactList_navigationButton__ZT5QF\",\"contactsListAlt\":\"ContactList_contactsListAlt__yC0Ao\"};","import { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport { selectContacts } from '../../redux/AppRedux/selectors';\nimport {\n  selectContactsFilter,\n  selectFilterUp,\n  selectFilterDown,\n  selectError,\n  selectIsLoading,\n} from '../../redux/AppRedux/selectors';\nimport {\n  deleteContact,\n  openModal,\n  fetchContactById,\n  handleFilterFowardUp,\n  handleFilterFowardDown,\n  handleFilterBackwardUp,\n  handleFilterBackwardDown,\n  updateStatus,\n  openMobileAndTabModal,\n} from '../../redux/AppRedux/operations';\nimport css from './ContactList.module.css';\nimport PropTypes from 'prop-types';\nimport Notiflix from 'notiflix';\nimport svg from '../SharedLayout/icons.svg';\n\nexport const ContactList = ({ children }) => {\n  const contacts = useSelector(selectContacts);\n  const filterUp = useSelector(selectFilterUp);\n  const filterDown = useSelector(selectFilterDown);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const [taskStatus, setTaskStatus] = useState();\n  //let myContacts  \n  const dispatch = useDispatch();\n  const handleDelete = evt => {\n    evt.target.style.boxShadow = 'inset 0 0 10px 5px rgba(0, 0, 0, 0.3)';\n    setTimeout(() => {\n      evt.target.style.boxShadow = 'none';\n    }, 1000);\n    //console.log(evt.target.name);\n    dispatch(deleteContact(evt.target.name));\n    /*//dispatch(closeModal());\n    const exist = contacts.find(contact => contact._id === evt.target.name);\n    console.log(contacts);\n    if (exist === undefined) {\n      console.log('gvghi');\n      dispatch(closeModal());\n    }*/\n    \n  };\n  const filterValue = useSelector(selectContactsFilter);\n\n  const handleModalOpen = (evt) => {\n    if (evt.target.getAttribute('data-id')) {\n      //console.log('Modal opened!');\n\n      const id = evt.currentTarget.getAttribute('data-id');\n      //console.log(id);\n      dispatch(fetchContactById(id));\n      dispatch(openModal());\n      dispatch(openMobileAndTabModal());\n    }\n  };\n  const [lowerLimit, setLowerLimit] = useState(0);\n  const [upperLimit, setUpperLimit] = useState(4);\n\n\n  const handleForward = (evt) => {\n    evt.target.style.boxShadow = 'inset 0 0 10px 5px rgba(0, 0, 0, 0.3)';\n    setTimeout(() => {\n      evt.target.style.boxShadow = 'none';\n    }, 500);\n    //let fwdWar = lowerLimit + 4;\n    if (filterValue === \"\") {\n      setLowerLimit(lowerLimit + 4);\n      setUpperLimit(upperLimit + 4);\n    }\n    if (filterValue !== \"\") {\n      console.log(\"OK\")\n      const str = filterUp;\n      const sto = filterDown\n      dispatch(handleFilterFowardUp(str));\n      dispatch(handleFilterFowardDown(sto));\n    }\n  }\n\n  const handleBackward = (evt) => {\n     evt.target.style.boxShadow = 'inset 0 0 10px 5px rgba(0, 0, 0, 0.3)';\n     setTimeout(() => {\n       evt.target.style.boxShadow = 'none';\n     }, 500);\n    //let fwdWar = lowerLimit + 4;\n    if (filterValue === \"\") {\n      setLowerLimit(lowerLimit - 4);\n      setUpperLimit(upperLimit - 4);\n    }\n    if (filterValue !== '') {\n      const str1 = filterUp;\n      const sto1 = filterDown;\n       dispatch(handleFilterBackwardUp(str1));\n       dispatch(handleFilterBackwardDown(sto1));\n     }\n  };\n  \n  const handleChange = (evt) => {\n    dispatch(updateStatus({ status: evt.target.checked, myUpdateStatusId:evt.target.name}));\n  }\n  \n   const bestMatches = contacts.filter(\n     contact =>\n       contact.name.toLowerCase().includes(filterValue.trim().toLowerCase()) &&\n       filterValue.trim() !== ''\n  );\n  \n  useEffect(()=>{},[contacts])\n\n  return (\n    <div className={css.contactsSection}>\n      <h3 className={css.contactsTitle}>Appointments / Booking List</h3>\n      {children}\n      {filterValue === '' && contacts.length !== 0 && (\n        <ul\n          className={css.contactsList}\n          style={{\n            height: `${\n              contacts.length >= 4 ? '296px' : \"auto\" \n            }`,\n          }}\n        >\n          {contacts.map(contact => {\n            const myindex = contacts.indexOf(contact);\n            if (myindex >= lowerLimit && myindex < upperLimit) {\n              return (\n                <li\n                  key={contact._id}\n                  data-id={contact._id}\n                  className={css.contactsItem}\n                  onClick={handleModalOpen}\n                >\n                  <span className={css.contactsData} data-id={contact._id}>\n                    <input\n                      type=\"checkbox\"\n                      className={css.checkbox}\n                      checked={contact.status}\n                      name={contact._id}\n                      onChange={handleChange}\n                    />\n                    :{' '}\n                    <span className={css.contactsPhone} data-id={contact._id}>\n                      {contact.name}\n                    </span>\n                  </span>\n                  <span className={css.contactsButtonArea}>\n                    <button\n                      type=\"submit\"\n                      className={css.contactsButton}\n                      name={contact._id}\n                      onClick={handleDelete}\n                    >\n                      Delete\n                    </button>\n                  </span>\n                </li>\n              );\n            }\n          })}\n        </ul>\n      )}\n      {contacts.length === 0 && (\n        <div className={css.contactsListAlt}>\n          {isLoading && !error && (\n            <b className={css.notification}>Loading Tasks...</b>\n          )}\n          {!isLoading && !error && (\n            <b className={css.notification}>No Appointments Here!!!</b>\n          )}\n          {!isLoading && error && <b className={css.notification}>Error!!!</b>}\n        </div>\n      )}\n      {filterValue === '' && (\n        <div className={css.navigationArea}>\n          {lowerLimit !== 0 && (\n            <button className={css.navigationButton} onClick={handleBackward}>\n              Prev\n            </button>\n          )}\n          {!(upperLimit > contacts.length) &&\n            upperLimit !== contacts.length && (\n              <button className={css.navigationButton} onClick={handleForward}>\n                Forward\n              </button>\n            )}\n        </div>\n      )}\n      {filterValue !== '' && (\n        <div className={css.navigationArea}>\n          {filterDown !== 0 && (\n            <button className={css.navigationButton} onClick={handleBackward}>\n              Prev\n            </button>\n          )}\n          {!(filterUp > bestMatches.length) &&\n            filterUp !== bestMatches.length && (\n              <button className={css.navigationButton} onClick={handleForward}>\n                Forward\n              </button>\n            )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  children: PropTypes.node,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"notification\":\"Contacts_notification__S7Pce\",\"notificationShow\":\"Contacts_notificationShow__kQwFb\",\"sortedWrapper\":\"Contacts_sortedWrapper__MSHB7\",\"coverWrapper\":\"Contacts_coverWrapper__X4gza\",\"selected\":\"Contacts_selected__JPpLk\",\"contactsDetailsHide\":\"Contacts_contactsDetailsHide__EAxL5\",\"contactsDetailsShow\":\"Contacts_contactsDetailsShow__GNtTf\",\"closeModal\":\"Contacts_closeModal__mVT9L\",\"contactsDetailsArea\":\"Contacts_contactsDetailsArea__qByv6\",\"contactImage\":\"Contacts_contactImage__9S+4-\",\"detailsSection\":\"Contacts_detailsSection__-isHv\",\"detailsTitle\":\"Contacts_detailsTitle__j7jAP\",\"detailsImageWrapper\":\"Contacts_detailsImageWrapper__4e94u\",\"detailsImage\":\"Contacts_detailsImage__Fv6gk\",\"detailsImageButton\":\"Contacts_detailsImageButton__R1iMX\",\"detailsImageInput\":\"Contacts_detailsImageInput__pywld\",\"detailsSectionTitle\":\"Contacts_detailsSectionTitle__zASfN\",\"detailsWrapper\":\"Contacts_detailsWrapper__C50Aa\",\"detailsItem\":\"Contacts_detailsItem__DEXoV\",\"detailsCover\":\"Contacts_detailsCover__lqSnp\",\"detailsInfo\":\"Contacts_detailsInfo__HEN35\",\"details\":\"Contacts_details__xkbEz\",\"detailsVal\":\"Contacts_detailsVal__AIPnW\",\"detailsDetailsVal\":\"Contacts_detailsDetailsVal__GxEUp\",\"detailsValPhone\":\"Contacts_detailsValPhone__28REO\",\"detailsValInput\":\"Contacts_detailsValInput__XHX6i\",\"detailsDetailsValInput\":\"Contacts_detailsDetailsValInput__kuePv\",\"detailsValInputPhone\":\"Contacts_detailsValInputPhone__Z59HF\",\"backDrop\":\"Contacts_backDrop__of3D3\",\"loader\":\"Contacts_loader__jgaE8\",\"detailButton\":\"Contacts_detailButton__+1M8g\",\"buttonWrapper\":\"Contacts_buttonWrapper__u4A+7\",\"detailsEditClose\":\"Contacts_detailsEditClose__3PDcl\",\"backdrop\":\"Contacts_backdrop__byVBb\",\"backdropIsHidden\":\"Contacts_backdropIsHidden__hDygs\",\"modalWindow\":\"Contacts_modalWindow__3981m\"};","var _defs;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgIcons(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"aria-hidden\": \"true\",\n    style: {\n      position: \"absolute\",\n      width: 0,\n      height: 0,\n      overflow: \"hidden\"\n    },\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"symbol\", {\n    id: \"icon-arrow\",\n    viewBox: \"0 0 32 32\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.586 27.414l-10-10c-0.781-0.781-0.781-2.047 0-2.828l10-10c0.781-0.781 2.047-0.781 2.828 0s0.781 2.047 0 2.828l-6.586 6.586h19.172c1.105 0 2 0.895 2 2s-0.895 2-2 2h-19.172l6.586 6.586c0.39 0.39 0.586 0.902 0.586 1.414s-0.195 1.024-0.586 1.414c-0.781 0.781-2.047 0.781-2.828 0z\"\n  })), /*#__PURE__*/React.createElement(\"symbol\", {\n    id: \"icon-cross\",\n    viewBox: \"0 0 32 32\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M31.708 25.708c0 0 0 0 0 0l-9.708-9.708 9.708-9.708c0 0 0 0 0 0 0.105-0.105 0.18-0.227 0.229-0.357 0.133-0.356 0.057-0.771-0.229-1.057l-4.586-4.586c-0.286-0.286-0.702-0.361-1.057-0.229-0.13 0.048-0.252 0.124-0.357 0.228 0 0 0 0 0 0l-9.708 9.708-9.708-9.708c0 0 0 0 0 0-0.105-0.104-0.227-0.18-0.357-0.228-0.356-0.133-0.771-0.057-1.057 0.229l-4.586 4.586c-0.286 0.286-0.361 0.702-0.229 1.057 0.049 0.13 0.124 0.252 0.229 0.357 0 0 0 0 0 0l9.708 9.708-9.708 9.708c0 0 0 0 0 0-0.104 0.105-0.18 0.227-0.229 0.357-0.133 0.355-0.057 0.771 0.229 1.057l4.586 4.586c0.286 0.286 0.702 0.361 1.057 0.229 0.13-0.049 0.252-0.124 0.357-0.229 0 0 0 0 0 0l9.708-9.708 9.708 9.708c0 0 0 0 0 0 0.105 0.105 0.227 0.18 0.357 0.229 0.356 0.133 0.771 0.057 1.057-0.229l4.586-4.586c0.286-0.286 0.362-0.702 0.229-1.057-0.049-0.13-0.124-0.252-0.229-0.357z\"\n  })), /*#__PURE__*/React.createElement(\"symbol\", {\n    id: \"icon-enlarge\",\n    viewBox: \"0 0 32 32\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M32 0h-13l5 5-6 6 3 3 6-6 5 5z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M32 32v-13l-5 5-6-6-3 3 6 6-5 5z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 32h13l-5-5 6-6-3-3-6 6-5-5z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0v13l5-5 6 6 3-3-6-6 5-5z\"\n  })), /*#__PURE__*/React.createElement(\"symbol\", {\n    id: \"icon-enlarge2\",\n    viewBox: \"0 0 32 32\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M32 0v13l-5-5-6 6-3-3 6-6-5-5zM14 21l-6 6 5 5h-13v-13l5 5 6-6z\"\n  })), /*#__PURE__*/React.createElement(\"symbol\", {\n    id: \"icon-pause\",\n    viewBox: \"0 0 32 32\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16 0c-8.837 0-16 7.163-16 16s7.163 16 16 16 16-7.163 16-16-7.163-16-16-16zM16 29c-7.18 0-13-5.82-13-13s5.82-13 13-13 13 5.82 13 13-5.82 13-13 13zM10 10h4v12h-4zM18 10h4v12h-4z\"\n  })), /*#__PURE__*/React.createElement(\"symbol\", {\n    id: \"icon-play2\",\n    viewBox: \"0 0 32 32\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16 0c-8.837 0-16 7.163-16 16s7.163 16 16 16 16-7.163 16-16-7.163-16-16-16zM16 29c-7.18 0-13-5.82-13-13s5.82-13 13-13 13 5.82 13 13-5.82 13-13 13zM12 9l12 7-12 7z\"\n  })), /*#__PURE__*/React.createElement(\"symbol\", {\n    id: \"icon-play3\",\n    viewBox: \"0 0 32 32\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6 4l20 12-20 12z\"\n  })), /*#__PURE__*/React.createElement(\"symbol\", {\n    id: \"icon-tv\",\n    viewBox: \"0 0 32 32\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M30.662 9.003c-2.775-0.399-5.731-0.688-8.815-0.851l5.153-5.153-2-2-7.017 7.017c-0.656-0.011-1.317-0.017-1.983-0.017v0l-8-8-2 2 6.069 6.069c-3.779 0.133-7.386 0.454-10.731 0.935-0.86 3.366-1.338 7.086-1.338 10.997s0.477 7.63 1.338 10.997c4.489 0.645 9.448 1.003 14.662 1.003s10.173-0.358 14.662-1.003c0.86-3.366 1.338-7.086 1.338-10.997s-0.477-7.63-1.338-10.997zM26.997 27.331c-3.367 0.43-7.086 0.669-10.997 0.669s-7.63-0.239-10.997-0.669c-0.645-2.244-1.003-4.724-1.003-7.331s0.358-5.087 1.003-7.331c3.366-0.43 7.086-0.669 10.997-0.669s7.63 0.239 10.996 0.669c0.645 2.244 1.004 4.724 1.004 7.331s-0.358 5.087-1.003 7.331z\"\n  })), /*#__PURE__*/React.createElement(\"symbol\", {\n    id: \"icon-volume-decrease\",\n    viewBox: \"0 0 32 32\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16 14h16v4h-16v-4z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M13 30c-0.26 0-0.516-0.102-0.707-0.293l-7.707-7.707h-3.586c-0.552 0-1-0.448-1-1v-10c0-0.552 0.448-1 1-1h3.586l7.707-7.707c0.286-0.286 0.716-0.372 1.090-0.217s0.617 0.519 0.617 0.924v26c0 0.404-0.244 0.769-0.617 0.924-0.124 0.051-0.254 0.076-0.383 0.076z\"\n  })), /*#__PURE__*/React.createElement(\"symbol\", {\n    id: \"icon-volume-increase\",\n    viewBox: \"0 0 32 32\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M32 18h-6v6h-4v-6h-6v-4h6v-6h4v6h6v4z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M13 30c-0.26 0-0.516-0.102-0.707-0.293l-7.707-7.707h-3.586c-0.552 0-1-0.448-1-1v-10c0-0.552 0.448-1 1-1h3.586l7.707-7.707c0.286-0.286 0.716-0.372 1.090-0.217s0.617 0.519 0.617 0.924v26c0 0.404-0.244 0.769-0.617 0.924-0.124 0.051-0.254 0.076-0.383 0.076z\"\n  })), /*#__PURE__*/React.createElement(\"symbol\", {\n    id: \"icon-books\",\n    viewBox: \"0 0 36 32\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7 4h-6c-0.55 0-1 0.45-1 1v22c0 0.55 0.45 1 1 1h6c0.55 0 1-0.45 1-1v-22c0-0.55-0.45-1-1-1zM6 10h-4v-2h4v2z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17 4h-6c-0.55 0-1 0.45-1 1v22c0 0.55 0.45 1 1 1h6c0.55 0 1-0.45 1-1v-22c0-0.55-0.45-1-1-1zM16 10h-4v-2h4v2z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M23.909 5.546l-5.358 2.7c-0.491 0.247-0.691 0.852-0.443 1.343l8.999 17.861c0.247 0.491 0.852 0.691 1.343 0.443l5.358-2.7c0.491-0.247 0.691-0.852 0.443-1.343l-8.999-17.861c-0.247-0.491-0.852-0.691-1.343-0.443z\"\n  })))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgIcons);\nexport default __webpack_public_path__ + \"static/media/icons.77c8d2ef0bd65aab65a1e4f05688514c.svg\";\nexport { ForwardRef as ReactComponent };","import { ContactForm } from '../ContactForm/ContactForm';\nimport { ContactList } from '../ContactList/ContactList';\nimport { Filter } from '../Filter/Filter';\nimport { useEffect } from 'react';\nimport {\n  fetchContacts,\n  closeModal,\n  updateContactAvatar,\n  updateContactName,\n  updateContactEmail,\n  updateContactPhone,\n  closeMobileAndTabModal\n} from '../../redux/AppRedux/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport clsx from 'clsx';\nimport {\n  selectError,\n  selectIsLoading,\n  selectOpenModal,\n  selectedContact,\n  selectedIsSlideLoading,\n  selectContacts,\n  selectOpenMobileAndTabModal,\n} from '../../redux/AppRedux/selectors';\nimport css from './Contacts.module.css';\nimport svg from './icons.svg';\nimport { ThreeCircles } from 'react-loader-spinner';\nimport { useState } from 'react';\nimport Notiflix from 'notiflix';\nimport Flatpickr from 'react-flatpickr';\nimport 'flatpickr/dist/themes/material_blue.css';\nimport { useMediaQuery } from 'react-responsive';\nimport { useRef } from 'react';\n\nexport const Contacts = () => {\n  const [inputKey, setInputKey] = useState(Date.now());\n  const myRef = useRef();\n  const sectionRef = useRef(null);\n   const [date, setDate] = useState(new Date());\n  const [isNameEditing, setNameEdit] = useState(false);\n  const [nameValue, setNameValue] = useState(\"\");\n  const [isEmailEditing, setEmailEdit] = useState(false);\n   const myContact = useSelector(selectedContact);\n  const [emailValue, setEmailValue] = useState(myContact.email);\n   const [isPhoneEditing, setPhoneEdit] = useState(false);\n   const [dateValue, setDateValue] = useState('');\n  //const [idValue, setIdValue] = useState('');\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const isOpenMobileAndTabModal = useSelector(selectOpenMobileAndTabModal);\n\n  //const contacts = useSelector(selectContacts);\n  const isSlideLoading = useSelector(selectedIsSlideLoading);\n \n \n  const error = useSelector(selectError);\n  const isDesktop = useMediaQuery({ query: '(min-width: 1280px)' });\n  const isMobileOrTab = useMediaQuery({ query: '(max-width: 1279px)' });\n   const isOpenModal = useSelector(selectOpenModal);\n const handleModalClose = () => {\n   dispatch(closeModal());\n   dispatch(closeMobileAndTabModal());\n   setNameEdit(false);\n   setEmailEdit(false);\n  };\n\n  const handleNameChange = evt => { \n     \n        const wrd = evt.target.value;\n        let hasExceeded = false;\n        let nameRay;\n        if (wrd.length > 30) {\n          nameRay = [...wrd];\n          nameRay.pop();\n          evt.target.value = nameRay.join('');\n          setNameValue(evt.target.value);\n          hasExceeded = true;\n    }\n        else {\n          setNameValue(evt.target.value);\n    }\n        if (hasExceeded === true) {\n          Notiflix.Notify.warning('Maximum Charater limit is 30');\n        }\n    /*const id = evt.currentTarget.getAttribute('data-id');\n    setIdValue(id);*/\n  }\n\n  const handleNameEdit = evt => { \n    setNameEdit(true);\n    //const input = document.getElementById('nameInput');\n    evt.target.style.boxShadow = 'inset 0 0 10px 5px rgba(0, 0, 0, 0.3)';\n    setTimeout(() => {\n      evt.target.style.boxShadow = 'none';\n      const input = document.querySelector('[name=\"username\"]');\n      input.focus();\n    }, 100);\n  }\n\n  const handleNameSave = evt => {\n    \n     if (nameValue.trim() !== '') {\n       const idValue = evt.target.name;\n       dispatch(updateContactName({ name: nameValue, myUpdateId: idValue }));\n       setNameEdit(false);\n     } else if (nameValue.trim() === '') {\n       Notiflix.Notify.warning('Input is required');\n     }\n     evt.target.style.boxShadow = 'inset 0 0 10px 5px rgba(0, 0, 0, 0.3)';\n     setTimeout(() => {\n       evt.target.style.boxShadow = 'none';\n     }, 500);\n  };\n  \n   const handleNameEditClose = () => {\n     setNameEdit(false);\n   };\n\n    const handleEmailChange = evt => {\n      setEmailValue(evt.target.value);\n      /*const id = evt.currentTarget.getAttribute('data-id');\n    setIdValue(id);*/\n      const wrd = evt.target.value;\n      let hasExceeded = false;\n      let nameRay;\n      if (wrd.length > 200) {\n        nameRay = [...wrd];\n        nameRay.pop();\n        evt.target.value = nameRay.join('');\n        hasExceeded = true;\n      }\n      if (hasExceeded === true) {\n        Notiflix.Notify.warning('Maximum Charater limit is 200');\n      }\n    };\n\n    const handleEmailEdit = evt => {\n      setEmailEdit(true);\n      evt.target.style.boxShadow = 'inset 0 0 10px 5px rgba(0, 0, 0, 0.3)';\n      setTimeout(() => {\n        evt.target.style.boxShadow = 'none';\n        const input = document.querySelector('[name=\"email\"]');\n        input.focus();\n      }, 100);\n  };\n\n   const handleEmailSave = evt => {\n     if (emailValue.trim() !== '') {\n       const idValue = evt.target.name;\n       dispatch(updateContactEmail({ email: emailValue, myUpdateId: idValue }));\n       setEmailEdit(false);\n     } else if (emailValue.trim() === '') {\n       Notiflix.Notify.warning('Input is required');\n     }\n     evt.target.style.boxShadow = 'inset 0 0 10px 5px rgba(0, 0, 0, 0.3)';\n     setTimeout(() => {\n       evt.target.style.boxShadow = 'none';\n     }, 500);\n   };\n\n  const handleEmailEditClose = () => {\n    setEmailEdit(false);\n    setEmailValue(myContact.email);\n  }\n\n \n   const handlePhoneEdit = evt => {\n     setPhoneEdit(true);\n     evt.target.style.boxShadow = 'inset 0 0 10px 5px rgba(0, 0, 0, 0.3)';\n     setTimeout(() => {\n       evt.target.style.boxShadow = 'none';\n       const input = document.querySelector('[name=\"date\"]');\n       input.focus();\n     }, 100);\n   };\n  \n  const handlePhoneSave = evt => {\n    /*if (phoneValue.trim() !== '') {*/\n    const idValue = evt.target.name;\n    const exactDate = new Date();\n    if (date <= exactDate) {\n      Notiflix.Notify.failure('Invalid date, choose a date in the future');\n    }\n    else{\n      dispatch(updateContactPhone({ dueDate: date, myUpdateId: idValue }));\n    }\n      setPhoneEdit(false);\n    \n    /*} else if (phoneValue.trim() === '') {\n      Notiflix.Notify.warning('Input is Empty or Incorrect');\n    }*/\n    evt.target.style.boxShadow = 'inset 0 0 10px 5px rgba(0, 0, 0, 0.3)';\n    setTimeout(() => {\n      evt.target.style.boxShadow = 'none';\n    }, 500);\n  };\n \n  const handlePhoneEditClose = () => {\n    setPhoneEdit(false);\n  };\n  \n   const handleImageChange = e => {\n     const file = e.target.files[0];\n     const id = e.currentTarget.getAttribute('data-id');\n     //dispatch(updateAvatar({ avatar: file }));\n     //console.log({ avatar: file });\n     if (file) {\n       dispatch(updateContactAvatar({ myFile: file, myId: id })); // Store the file under the key \"avatar\"\n     }\n      setInputKey(Date.now());\n   };\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  useEffect(() => {\n    setEmailValue(myContact.email);\n    setNameEdit(false);\n    setEmailEdit(false);\n    setPhoneEdit(false);\n  }, [myContact.email]);\n\n\n   useEffect(() => {\n     setNameValue(myContact.name);\n     setNameEdit(false);\n     setEmailEdit(false);\n     setPhoneEdit(false);\n   }, [myContact.name]);\n  \n  useEffect(()=>{if(isOpenModal === true){sectionRef.current?.scrollIntoView({ behavior: 'smooth' });}},[isOpenModal])\n  \n     useEffect(() => {\n       //setPhoneValue(myContact.phone);\n       /*const date = new Date(myContact.phone);\n\n       const formattedDate = date.toLocaleDateString('en-GB', {\n         year: 'numeric',\n         month: '2-digit',\n         day: '2-digit',\n       });\n       setDateValue(formattedDate)*/\n\n       const userLocale = navigator.language; // e.g., \"en-US\" or \"fr-FR\"\n       const myDate = new Date(myContact.dueDate);\n\n      const formatter = new Intl.DateTimeFormat(userLocale, {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit', // Optional: include seconds\n        hour12: true, // Optional: use 12-hour clock (set to false for 24-hour clock)\n      });\n       setDateValue(formatter.format(myDate));\n        \n     }, [myContact.dueDate]);\n\n  //console.log(myVal);\n\n  return (\n    <div className={clsx(css.coverWrapper, {})}>\n      {isMobileOrTab && (\n        <div\n          className={clsx(css.backdrop, {\n            [css.backdropIsHidden]: isOpenMobileAndTabModal,\n          })}\n        >\n          <div className={css.modalWindow}>\n            {isSlideLoading && (\n              <div className={css.backDrop}>\n                <ThreeCircles\n                  visible={true}\n                  height=\"80\"\n                  width=\"80\"\n                  color=\"#9225ff\"\n                  radius=\"9\"\n                  ariaLabel=\"three-dots-loading\"\n                  wrapperStyle={{}}\n                  wrapperClass={css.loader}\n                />\n              </div>\n            )}\n            <button className={css.closeModal} onClick={handleModalClose}>\n              <svg width=\"10px\" height=\"10px\" className={css.modalIcon}>\n                <use href={`${svg}#icon-cross`}></use>\n              </svg>\n            </button>\n            <p className={css.detailsTitle}>CUSTOMER DETAILS</p>\n            <div className={css.detailsImageWrapper}>\n              <img\n                className={css.detailsImage}\n                src={`${myContact.avatarURL}`}\n                alt=\"Contact\"\n              />\n            </div>\n            <input\n              className={css.detailsImageButton}\n              type=\"file\"\n              accept=\"image/*\"\n              name=\"avatar\"\n              key={inputKey}\n              onChange={handleImageChange}\n              id=\"schedulerMobileTab\"\n              data-id={myContact._id}\n            />\n            <label\n              className={css.detailsImageInput}\n              htmlFor=\"schedulerMobileTab\"\n            >\n              Update Customer Avatar +\n            </label>\n            <ul className={css.detailsWrapper}>\n              <li className={css.detailsItem}>\n                <span className={css.detailsCover}>\n                  <span className={css.detailsInfo}>\n                    <span className={css.details}>Name:</span>{' '}\n                    {isNameEditing === false ? (\n                      <span className={css.detailsVal}>\n                        <i className={css.detail}>{myContact.name}</i>\n                      </span>\n                    ) : (\n                      <input\n                        type=\"text\"\n                        className={css.detailsValInput}\n                        required\n                        onChange={handleNameChange}\n                        data-id={myContact._id}\n                        name=\"username\"\n                        defaultValue={myContact.name}\n                      />\n                    )}\n                  </span>\n                  <span className={css.buttonWrapper}>\n                    {isNameEditing === true && (\n                      <button\n                        className={css.detailsEditClose}\n                        onClick={handleNameEditClose}\n                      >\n                        <svg width=\"5px\" height=\"5px\" className={css.modalIcon}>\n                          <use href={`${svg}#icon-cross`}></use>\n                        </svg>\n                      </button>\n                    )}\n                    {isNameEditing === false ? (\n                      <button\n                        className={css.detailButton}\n                        onClick={handleNameEdit}\n                      >\n                        Edit\n                      </button>\n                    ) : (\n                      <button\n                        name={myContact._id}\n                        className={css.detailButton}\n                        onClick={handleNameSave}\n                      >\n                        Save\n                      </button>\n                    )}\n                  </span>\n                </span>\n              </li>\n              <li className={css.detailsItem}>\n                <span className={css.detailsCover}>\n                  <span className={css.detailsInfo}>\n                    <span className={css.details}>Email:</span>{' '}\n                    {isEmailEditing === false ? (\n                      <pre className={css.detailsDetailsVal}>\n                        <i className={css.detail}>{myContact.email}</i>\n                        {console.log(myContact.email)}\n                      </pre>\n                    ) : (\n                      <input\n                        type=\"text\"\n                        className={css.detailsDetailsValInput}\n                        required\n                        onChange={handleEmailChange}\n                        data-id={myContact._id}\n                        name=\"email\"\n                        title=\"Enter the details of your task\"\n                        defaultValue={myContact.email}\n                      />\n                    )}\n                  </span>\n                  <span className={css.buttonWrapper}>\n                    {isEmailEditing === true && (\n                      <button\n                        className={css.detailsEditClose}\n                        onClick={handleEmailEditClose}\n                      >\n                        <svg width=\"5px\" height=\"5px\" className={css.modalIcon}>\n                          <use href={`${svg}#icon-cross`}></use>\n                        </svg>\n                      </button>\n                    )}\n                    {isEmailEditing === false ? (\n                      <button\n                        className={css.detailButton}\n                        onClick={handleEmailEdit}\n                      >\n                        Edit\n                      </button>\n                    ) : (\n                      <button\n                        name={myContact._id}\n                        className={css.detailButton}\n                        onClick={handleEmailSave}\n                      >\n                        Save\n                      </button>\n                    )}\n                  </span>\n                </span>\n              </li>\n              <li className={css.detailsItem}>\n                <span className={css.detailsCover}>\n                  <span className={css.detailsInfo}>\n                    <span className={css.details}>Due Date:</span>{' '}\n                    {isPhoneEditing === false ? (\n                      <span className={css.detailsValPhone}>\n                        <i className={css.detail}>{dateValue}</i>\n                      </span>\n                    ) : (\n                      <Flatpickr\n                        data-enable-time\n                        value={date}\n                        onChange={selectedDates => {\n                          const nowDate = new Date();\n                          if (selectedDates[0] <= nowDate) {\n                            Notiflix.Notify.warning(\n                              'Choose a date in the future'\n                            );\n                          } else {\n                            Notiflix.Notify.success('Due Date Selected');\n                          }\n                          setDate(selectedDates[0]);\n                        }}\n                        options={{\n                          minuteIncrement: 1, // Set minute increments to 1\n                        }}\n                        render={({ defaultValue, ...props }, ref) => (\n                          <input\n                            {...props}\n                            ref={ref}\n                            className={css.detailsValInputPhone}\n                            required\n                            data-id={myContact._id}\n                            name=\"date\"\n                          />\n                        )}\n                      />\n                    )}\n                  </span>\n                  <span className={css.buttonWrapper}>\n                    {isPhoneEditing === true && (\n                      <button\n                        className={css.detailsEditClose}\n                        onClick={handlePhoneEditClose}\n                      >\n                        <svg width=\"5px\" height=\"5px\" className={css.modalIcon}>\n                          <use href={`${svg}#icon-cross`}></use>\n                        </svg>\n                      </button>\n                    )}\n                    {isPhoneEditing === false ? (\n                      <button\n                        className={css.detailButton}\n                        onClick={handlePhoneEdit}\n                      >\n                        Edit\n                      </button>\n                    ) : (\n                      <button\n                        name={myContact._id}\n                        className={css.detailButton}\n                        onClick={handlePhoneSave}\n                      >\n                        Save\n                      </button>\n                    )}\n                  </span>\n                </span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      )}\n      <div\n        className={clsx(css.sortedWrapper, {\n          [css.selected]: isOpenModal && isDesktop,\n        })}\n      >\n        <ContactForm>\n          <b\n            className={clsx(css.notification, {\n              [css.notificationShow]: isLoading && !error,\n            })}\n          >\n            Please wait...\n          </b>\n\n          {error && (\n            <b className={css.notificationShow}>\n              There was an error, logout and login again!!!\n            </b>\n          )}\n          <div\n            ref={sectionRef}\n            className={clsx(css.contactsDetailsHide, {\n              [css.contactsDetailsShow]: isOpenModal && isDesktop,\n            })}\n          >\n            {isSlideLoading && (\n              <div className={css.backDrop}>\n                <ThreeCircles\n                  visible={true}\n                  height=\"80\"\n                  width=\"80\"\n                  color=\"#9225ff\"\n                  radius=\"9\"\n                  ariaLabel=\"three-dots-loading\"\n                  wrapperStyle={{}}\n                  wrapperClass={css.loader}\n                />\n              </div>\n            )}\n            <button className={css.closeModal} onClick={handleModalClose}>\n              <svg width=\"10px\" height=\"10px\" className={css.modalIcon}>\n                <use href={`${svg}#icon-cross`}></use>\n              </svg>\n            </button>\n            <p className={css.detailsTitle}>CUSTOMER DETAILS</p>\n            <div className={css.detailsImageWrapper}>\n              <img\n                className={css.detailsImage}\n                src={`${myContact.avatarURL}`}\n                alt=\"Contact\"\n              />\n            </div>\n            <input\n              className={css.detailsImageButton}\n              type=\"file\"\n              accept=\"image/*\"\n              name=\"avatar\"\n              key={inputKey}\n              onChange={handleImageChange}\n              id=\"schedulerDesktop\"\n              data-id={myContact._id}\n            />\n            <label className={css.detailsImageInput} htmlFor=\"schedulerDesktop\">\n              Update Customer Avatar +\n            </label>\n            <ul className={css.detailsWrapper}>\n              <li className={css.detailsItem}>\n                <span className={css.detailsCover}>\n                  <span className={css.detailsInfo}>\n                    <span className={css.details}>Name:</span>{' '}\n                    {isNameEditing === false ? (\n                      <span className={css.detailsVal}>\n                        <i className={css.detail}>{myContact.name}</i>\n                      </span>\n                    ) : (\n                      <input\n                        type=\"text\"\n                        className={css.detailsValInput}\n                        required\n                        onChange={handleNameChange}\n                        data-id={myContact._id}\n                        name=\"username\"\n                        defaultValue={myContact.name}\n                      />\n                    )}\n                  </span>\n                  <span className={css.buttonWrapper}>\n                    {isNameEditing === true && (\n                      <button\n                        className={css.detailsEditClose}\n                        onClick={handleNameEditClose}\n                      >\n                        <svg width=\"5px\" height=\"5px\" className={css.modalIcon}>\n                          <use href={`${svg}#icon-cross`}></use>\n                        </svg>\n                      </button>\n                    )}\n                    {isNameEditing === false ? (\n                      <button\n                        className={css.detailButton}\n                        onClick={handleNameEdit}\n                      >\n                        Edit\n                      </button>\n                    ) : (\n                      <button\n                        name={myContact._id}\n                        className={css.detailButton}\n                        onClick={handleNameSave}\n                      >\n                        Save\n                      </button>\n                    )}\n                  </span>\n                </span>\n              </li>\n              <li className={css.detailsItem}>\n                <span className={css.detailsCover}>\n                  <span className={css.detailsInfo}>\n                    <span className={css.details}>Email:</span>{' '}\n                    {isEmailEditing === false ? (\n                      <pre className={css.detailsDetailsVal}>\n                        <i className={css.detail}>{myContact.email}</i>\n                        {console.log(myContact.email)}\n                      </pre>\n                    ) : (\n                      <input\n                        type=\"text\"\n                        className={css.detailsDetailsValInput}\n                        required\n                        onChange={handleEmailChange}\n                        data-id={myContact._id}\n                        name=\"email\"\n                        title=\"Enter customer email\"\n                        defaultValue={myContact.email}\n                      />\n                    )}\n                  </span>\n                  <span className={css.buttonWrapper}>\n                    {isEmailEditing === true && (\n                      <button\n                        className={css.detailsEditClose}\n                        onClick={handleEmailEditClose}\n                      >\n                        <svg width=\"5px\" height=\"5px\" className={css.modalIcon}>\n                          <use href={`${svg}#icon-cross`}></use>\n                        </svg>\n                      </button>\n                    )}\n                    {isEmailEditing === false ? (\n                      <button\n                        className={css.detailButton}\n                        onClick={handleEmailEdit}\n                      >\n                        Edit\n                      </button>\n                    ) : (\n                      <button\n                        name={myContact._id}\n                        className={css.detailButton}\n                        onClick={handleEmailSave}\n                      >\n                        Save\n                      </button>\n                    )}\n                  </span>\n                </span>\n              </li>\n              <li className={css.detailsItem}>\n                <span className={css.detailsCover}>\n                  <span className={css.detailsInfo}>\n                    <span className={css.details}>Due Date:</span>{' '}\n                    {isPhoneEditing === false ? (\n                      <span className={css.detailsValPhone}>\n                        <i className={css.detail}>{dateValue}</i>\n                      </span>\n                    ) : (\n                      <Flatpickr\n                        data-enable-time\n                        value={date}\n                        onChange={selectedDates => {\n                          const nowDate = new Date();\n                          if (selectedDates[0] <= nowDate) {\n                            Notiflix.Notify.warning(\n                              'Choose a date in the future'\n                            );\n                          } else {\n                            Notiflix.Notify.success('Due Date Selected');\n                          }\n                          setDate(selectedDates[0]);\n                        }}\n                        options={{\n                          minuteIncrement: 1, // Set minute increments to 1\n                        }}\n                        render={({ defaultValue, ...props }, ref) => (\n                          <input\n                            {...props}\n                            ref={ref}\n                            className={css.detailsValInputPhone}\n                            required\n                            data-id={myContact._id}\n                            name=\"date\"\n                          />\n                        )}\n                      />\n                    )}\n                  </span>\n                  <span className={css.buttonWrapper}>\n                    {isPhoneEditing === true && (\n                      <button\n                        className={css.detailsEditClose}\n                        onClick={handlePhoneEditClose}\n                      >\n                        <svg width=\"5px\" height=\"5px\" className={css.modalIcon}>\n                          <use href={`${svg}#icon-cross`}></use>\n                        </svg>\n                      </button>\n                    )}\n                    {isPhoneEditing === false ? (\n                      <button\n                        className={css.detailButton}\n                        onClick={handlePhoneEdit}\n                      >\n                        Edit\n                      </button>\n                    ) : (\n                      <button\n                        name={myContact._id}\n                        className={css.detailButton}\n                        onClick={handlePhoneSave}\n                      >\n                        Save\n                      </button>\n                    )}\n                  </span>\n                </span>\n              </li>\n            </ul>\n          </div>\n          <ContactList>\n            <Filter />\n          </ContactList>\n        </ContactForm>\n      </div>\n    </div>\n  );\n};\n\nexport default Contacts;\n","// extracted by mini-css-extract-plugin\nexport default {\"formLabel\":\"Filter_formLabel__Ozoh5\",\"formInput\":\"Filter_formInput__XNLZn\",\"contactsSection\":\"Filter_contactsSection__lb9Ll\",\"contactsTitle\":\"Filter_contactsTitle__eTnDx\",\"contactsList\":\"Filter_contactsList__78f6h\",\"contactsData\":\"Filter_contactsData__q4ogS\",\"contactsPhone\":\"Filter_contactsPhone__hxyN-\",\"contactsItemWrapper\":\"Filter_contactsItemWrapper__-Mxdd\",\"contactsItem\":\"Filter_contactsItem__CHFiw\",\"contactsDetails\":\"Filter_contactsDetails__0UF-g\",\"contactsName\":\"Filter_contactsName__gRaQA\",\"checkbox\":\"Filter_checkbox__wp-8y\",\"contactsButtonArea\":\"Filter_contactsButtonArea__0a5PO\",\"contactsButton\":\"Filter_contactsButton__7e+W-\",\"navigationArea\":\"Filter_navigationArea__OTHql\",\"navigationButton\":\"Filter_navigationButton__xNnWu\"};","import { useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/AppRedux/selectors';\nimport {\n  selectContactsFilter,\n  selectFilterUp,\n  selectFilterDown\n} from '../../redux/AppRedux/selectors';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport css from './Filter.module.css';\nimport { setFilter } from '../../redux/AppRedux/filterSlice';\nimport {\n  deleteContact,\n  openModal,\n  fetchContactById,\n  openMobileAndTabModal,\n  updateStatus,\n} from '../../redux/AppRedux/operations';\n\nexport const Filter = () => {\n  const searchTermId = nanoid();\n  const contacts = useSelector(selectContacts);\n  const filterUpper = useSelector(selectFilterUp);\n  const filterLower = useSelector(selectFilterDown);\n  const filterValue = useSelector(selectContactsFilter);\n  const dispatch = useDispatch();\n  const handleSearch = event => {\n    dispatch(setFilter(event.target.value));\n    console.log(event.target.value);\n  };\n  const bestMatches = contacts.filter(\n    contact =>\n      contact.name.toLowerCase().includes(filterValue.trim().toLowerCase()) &&\n      filterValue.trim() !== ''\n  );\n\n  const handleModalOpen = evt => {\n    if (evt.target.getAttribute('data-id')) {\n      const id = evt.currentTarget.getAttribute('data-id');\n      dispatch(fetchContactById(id));\n      dispatch(openModal());\n      dispatch(openMobileAndTabModal());\n    }\n  };\n\n  const handleDelete = evt => {\n    evt.target.style.boxShadow = 'inset 0 0 10px 5px rgba(0, 0, 0, 0.3)';\n    setTimeout(() => {\n      evt.target.style.boxShadow = 'none';\n    }, 1000);\n    dispatch(deleteContact(evt.target.name));\n  };\n\n   const handleChange = (evt) => {\n      dispatch(updateStatus({ status: evt.target.checked, myUpdateStatusId:evt.target.name}));\n    }\n\n  return (\n    <div className={css.contactList}>\n      <label htmlFor={searchTermId}>\n        <span className={css.formLabel}>Search Appointments By Customer:</span>\n        <input\n          type=\"text\"\n          placeholder=\"Enter Customer Name\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Enter Customer Name\"\n          required\n          onChange={handleSearch}\n          id={searchTermId}\n          autoComplete=\"off\"\n          className={css.formInput}\n          value={filterValue}\n        />\n      </label>\n\n      {filterValue !== '' && bestMatches.length !== 0 && (\n        <ul className={css.contactsList}>\n          {bestMatches.map(contact => {\n            const myindex = bestMatches.indexOf(contact);\n            if (myindex >= filterLower && myindex < filterUpper) {\n              return (\n                <li\n                  key={contact._id}\n                  data-id={contact._id}\n                  className={css.contactsItem}\n                  onClick={handleModalOpen}\n                >\n                  <span className={css.contactsData} data-id={contact._id}>\n                    <input\n                      type=\"checkbox\"\n                      className={css.checkbox}\n                      checked={contact.status}\n                      name={contact._id}\n                      onChange={handleChange}\n                    />\n                    :{' '}\n                    <span className={css.contactsPhone} data-id={contact._id}>\n                      {contact.name}\n                    </span>\n                  </span>\n                  <span className={css.contactsButtonArea}>\n                    <button\n                      type=\"submit\"\n                      className={css.contactsButton}\n                      name={contact._id}\n                      onClick={handleDelete}\n                    >\n                      Delete\n                    </button>\n                  </span>\n                </li>\n              );\n            }\n          })}\n        </ul>\n      )}\n    </div>\n  );\n};\n","export const selectContacts = state => state.contacts.contacts.items;\n\nexport const selectContactsFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\n\nexport const selectIsKeyLoading = state => state.contacts.contacts.isKeyLoading;\n\nexport const selectError = state => state.contacts.contacts.error;\n\nexport const selectOpenModal = state => state.contacts.contacts.openMyModal;\n\nexport const selectOpenSortedAllModal = state => state.contacts.contacts.openMyAllModal;\n\nexport const selectOpenSortedPendingModal = state => state.contacts.contacts.openMyPendingModal;\n\nexport const selectOpenSortedCompletedModal = state => state.contacts.contacts.openMyCompletedModal;\n\nexport const selectOpenSortedPastDueModal = state => state.contacts.contacts.openMyPastDueModal;\n\nexport const selectedContact = state => state.contacts.contacts.selectedContact;\n\nexport const selectedSortedAllContact = state => state.contacts.contacts.selectedSortedAllContact;\n\nexport const selectedSortedPendingContact = state => state.contacts.contacts.selectedSortedPendingContact;\n\nexport const selectedSortedCompletedContact = state => state.contacts.contacts.selectedSortedCompletedContact;\n\nexport const selectedSortedPastDueContact = state => state.contacts.contacts.selectedSortedPastDueContact;\n\nexport const selectedIsSlideLoading = state => state.contacts.contacts.isSlideLoading;\n\nexport const selectedIsSlideError = state => state.contacts.contacts.isSlideError;\n\nexport const selectFilterUp = state => state.contacts.contacts.filterUpLimit;\n\nexport const selectFilterDown = state => state.contacts.contacts.filterDownLimit;\n\nexport const selectCustomerName = state => state.contacts.contacts.customerName;\n\nexport const selectOpenMobileAndTabModal = state => state.contacts.contacts.openMyMobileAndTabModal;\n\nexport const selectOpenAllMobileAndTabModal = state => state.contacts.contacts.openMyAllMobileAndTabModal;\n\nexport const selectOpenPendingMobileAndTabModal = state => state.contacts.contacts.openMyPendingMobileAndTabModal;\n\nexport const selectOpenCompletedMobileAndTabModal = state => state.contacts.contacts.openMyCompletedMobileAndTabModal;\n\nexport const selectOpenPastDueMobileAndTabModal = state => state.contacts.contacts.openMyPastDueMobileAndTabModal;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["ContactForm","_ref","children","contactNameId","nanoid","contactNumberId","dispatch","useSelector","selectContacts","useDispatch","_useState","useState","Date","_useState2","_slicedToArray","date","setDate","customerName","selectCustomerName","_jsxs","className","css","_jsx","onSubmit","event","preventDefault","target","value","trim","exactDate","Notiflix","addContact","name","dueDate","type","placeholder","pattern","title","required","autoComplete","id","onChange","evt","nameRay","wrd","hasExceeded","length","_toConsumableArray","pop","join","saveCustomerName","Flatpickr","selectedDates","nowDate","options","minuteIncrement","render","_ref2","ref","defaultValue","props","_objectWithoutProperties","_excluded","_objectSpread","onClick","style","boxShadow","setTimeout","ContactList","contacts","filterUp","selectFilterUp","filterDown","selectFilterDown","isLoading","selectIsLoading","error","selectError","handleDelete","deleteContact","filterValue","selectContactsFilter","handleModalOpen","getAttribute","currentTarget","fetchContactById","openModal","openMobileAndTabModal","_useState3","_useState4","lowerLimit","setLowerLimit","_useState5","_useState6","upperLimit","setUpperLimit","handleForward","console","log","str","sto","handleFilterFowardUp","handleFilterFowardDown","handleBackward","str1","sto1","handleFilterBackwardUp","handleFilterBackwardDown","handleChange","updateStatus","status","checked","myUpdateStatusId","bestMatches","filter","contact","toLowerCase","includes","useEffect","height","concat","map","myindex","indexOf","_id","Contacts","now","inputKey","setInputKey","sectionRef","useRef","isNameEditing","setNameEdit","_useState7","_useState8","nameValue","setNameValue","_useState9","_useState10","isEmailEditing","setEmailEdit","myContact","selectedContact","_useState11","email","_useState12","emailValue","setEmailValue","_useState13","_useState14","isPhoneEditing","setPhoneEdit","_useState15","_useState16","dateValue","setDateValue","isOpenMobileAndTabModal","selectOpenMobileAndTabModal","isSlideLoading","selectedIsSlideLoading","isDesktop","useMediaQuery","query","isMobileOrTab","isOpenModal","selectOpenModal","handleModalClose","closeModal","closeMobileAndTabModal","handleNameChange","handleNameEdit","document","querySelector","focus","handleNameSave","idValue","updateContactName","myUpdateId","handleNameEditClose","handleEmailChange","handleEmailEdit","handleEmailSave","updateContactEmail","handleEmailEditClose","handlePhoneEdit","handlePhoneSave","updateContactPhone","handlePhoneEditClose","handleImageChange","e","file","files","updateContactAvatar","myFile","myId","fetchContacts","_sectionRef$current","current","scrollIntoView","behavior","userLocale","navigator","language","myDate","formatter","Intl","DateTimeFormat","year","month","day","hour","minute","second","hour12","format","clsx","_defineProperty","ThreeCircles","visible","width","color","radius","ariaLabel","wrapperStyle","wrapperClass","href","svg","src","avatarURL","alt","accept","htmlFor","_excluded2","Filter","searchTermId","filterUpper","filterLower","setFilter","state","items","openMyModal","selectOpenSortedAllModal","openMyAllModal","selectOpenSortedPendingModal","openMyPendingModal","selectOpenSortedCompletedModal","openMyCompletedModal","selectOpenSortedPastDueModal","openMyPastDueModal","selectedSortedAllContact","selectedSortedPendingContact","selectedSortedCompletedContact","selectedSortedPastDueContact","filterUpLimit","filterDownLimit","openMyMobileAndTabModal","selectOpenAllMobileAndTabModal","openMyAllMobileAndTabModal","selectOpenPendingMobileAndTabModal","openMyPendingMobileAndTabModal","selectOpenCompletedMobileAndTabModal","openMyCompletedMobileAndTabModal","selectOpenPastDueMobileAndTabModal","openMyPastDueMobileAndTabModal","size","arguments","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}